name: Build and Test
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [master]

concurrency:
  group: ${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  check_files:
    name: Check files
    # Disable this workflow on forks
    if: github.repository_owner == 'taichi-dev'
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "Concurrency group: ${{ github.event.number || github.run_id }}"
          echo "=============== list modified files ==============="
          git diff --name-only @^

          chore_files=( LICENSE CONTRIBUTING.md README.md netlify.toml )
          chore_dirs=( docs )
          run_job=false

          for file in $(git diff --name-only @^); do
            is_chore=false

            for chore_file in ${chore_files[*]}; do
              [[ ${file} == ${chore_file} ]] && is_chore=true && break
            done

            for chore_dir in ${chore_dirs[*]}; do
              [[ ${file} == ${chore_dir}/* ]] && is_chore=true && break
            done

            if ! ${is_chore}; then
              run_job=true
              break
            fi
          done

          if ${run_job}; then
            echo "::set-output name=run_job::true"
          else
            echo "::set-output name=run_job::false"
          fi

  check_static_analyzer:
    name: Check Static Analyzer
    runs-on: ubuntu-latest
    needs: check_files
    if: needs.check_files.outputs.run_job == 'true'
    container:
      image: ghcr.io/taichi-dev/taichidev-cpu-ubuntu18.04:v0.3.0
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: clang-tidy
        run: |
          apt install -y clang-tidy-10
          bash .github/workflows/scripts/check_clang_tidy.sh "$CI_SETUP_CMAKE_ARGS"
        env:
          CI_SETUP_CMAKE_ARGS: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=ON -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=OFF

  build_and_test_cpu_linux:
    name: Build and Test linux (CPU)
    needs: check_files
    timeout-minutes: 60
    container:
      image: ghcr.io/taichi-dev/taichidev-cpu-ubuntu18.04:v0.3.0
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    strategy:
      matrix:
        include:
          - python: py39
            with_cc: ON
            wanted_archs: 'cpu,cc'
          - python: py310
            with_cc: ON
            wanted_archs: 'cpu,cc'
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-linux-${{matrix.with_cc}}-${{ github.sha }}
          restore-keys: |
            sccache-linux-${{matrix.with_cc}}-

      - name: Build
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          bash .github/workflows/scripts/unix_build.sh
        env:
          PY: ${{ matrix.python }}
          PROJECT_NAME: taichi
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=${{ matrix.with_cc }} -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

      - name: Test
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          bash .github/workflows/scripts/unix_test.sh
        env:
          PY: ${{ matrix.python }}
          TI_WANTED_ARCHS: ${{ matrix.wanted_archs }}

  build_and_test_cpu_mac:
    name: Build and Test macos (CPU)
    needs: check_files
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: macos-10.15
            python: 3.7
            with_cc: OFF
            with_cpp_tests: ON
            wanted_archs: 'cpu'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-mac-${{ github.sha }}
          restore-keys: |
            sccache-mac-

      - name: Download Pre-Built LLVM 10.0.0
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          python misc/ci_download.py
        env:
          CI_PLATFORM: ${{ matrix.os }}

      - name: Build & Install
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          brew install molten-vk
          mkdir -p sccache_cache
          export PATH=`pwd`/taichi-llvm/bin/:$PATH
          .github/workflows/scripts/unix_build.sh
          brew uninstall molten-vk
        env:
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=${{ matrix.with_cc }} -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=${{ matrix.with_cpp_tests }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          CXX: clang++
      # [DEBUG] Copy this step around to enable debugging inside Github Action instances.
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3
      #  with:
      #    limit-access-to-actor: true

      - name: Test
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          .github/workflows/scripts/unix_test.sh
        env:
          TI_WANTED_ARCHS: ${{ matrix.wanted_archs }}
          TI_CI: 1

  build_and_test_gpu_linux:
    name: Build and Test (GPU)
    needs: check_files
    runs-on: [self-hosted, cuda, vulkan, cn]
    timeout-minutes: 60
    container:
      image: registry.taichigraphics.com/taichidev-ubuntu18.04:v0.3.0
      volumes:
        - /tmp/.X11-unix:/tmp/.X11-unix
      env:
        DISPLAY: ':1'
      options: --gpus all --user root
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-linux-gpu-${{ github.sha }}
          restore-keys: |
            sccache-linux-gpu-

      - name: Build & Install
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          bash .github/workflows/scripts/unix_build.sh
        env:
          PY: py38
          GPU_BUILD: ON
          PROJECT_NAME: taichi
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=ON -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache

      - name: Test
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          bash .github/workflows/scripts/unix_test.sh
        env:
          PY: py38
          GPU_TEST: ON
          TI_WANTED_ARCHS: 'cpu,cuda,vulkan,opengl'
          TI_DEVICE_MEMORY_GB: '0.7'

  build_and_test_windows:
    name: Build and Test Windows
    needs: check_files
    runs-on: [self-hosted, windows, gpu]
    timeout-minutes: 90
    steps:
      # See also https://github.com/taichi-dev/taichi/issues/4161
      - name: Cleanup
        shell: powershell
        run: |
          remove-item '${{ github.workspace }}\*' -recurse -force

      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Add Visual Studio Shell to ENV
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: ccache_cache
          key: ccache-win64-${{ github.sha }}
          restore-keys: |
            ccache-win64-

      - name: Build
        shell: powershell
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          .\.github\workflows\scripts\win_build.ps1 -installVulkan -install -libsDir C:\

      - name: Test
        shell: powershell
        if: ${{ needs.check_files.outputs.run_job != 'false' }}
        run: |
          .\.github\workflows\scripts\win_test.ps1
        env:
          TI_WANTED_ARCHS: cpu,cuda,opengl
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=ON -DTI_WITH_CC:BOOL=OFF
          TI_SKIP_VERSION_CHECK: ON
          TI_CI: 1
          PYTHON: '3.7'
          TI_DEVICE_MEMORY_GB: '0.7'

  build_and_test_m1:
    name: Build and Test (Apple M1)
    needs: check_files
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: macos-latest
            python: 3.8
    defaults:
      run:
        # https://github.com/actions/runner/issues/805#issuecomment-844426478
        shell: '/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}'
    runs-on: [self-hosted, m1]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Get sccache cache
        uses: actions/cache@v2
        with:
          path: sccache_cache
          key: sccache-m1-${{ github.sha }}
          restore-keys: |
            sccache-m1-

      - name: Build
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          export PATH=/Users/github/miniforge3/envs/$PY/bin:$PATH
          brew install molten-vk
          .github/workflows/scripts/unix_build.sh
        env:
          TAICHI_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CUDA:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=ON -DTI_BUILD_TESTS:BOOL=ON -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          PY: ${{ matrix.python }}
          CXX: clang++

      - name: Test
        if: needs.check_files.outputs.run_job == 'true'
        run: |
          export PATH=/Users/github/miniforge3/envs/$PY/bin:$PATH
          .github/workflows/scripts/unix_test.sh
        env:
          TI_WANTED_ARCHS: 'metal,vulkan,cpu'
          PY: ${{ matrix.python }}
          PLATFORM: 'm1'
          TI_CI: 1
